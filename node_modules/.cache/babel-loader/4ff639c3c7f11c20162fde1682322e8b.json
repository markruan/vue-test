{"remainingRequest":"/Users/mc/项目/VUE/2020/node_modules/babel-loader/lib/index.js!/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mc/项目/VUE/2020/src/components/audio-player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mc/项目/VUE/2020/src/components/audio-player.vue","mtime":1602756715739},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"AudioPlayer\",\n  props: {\n    // 音频播放列表\n    audioList: {\n      default: null,\n      type: Array\n    },\n    // 显示播放按钮\n    showPlayButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示上一首按钮\n    showPrevButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示下一首按钮\n    showNextButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示进度条\n    showProgressBar: {\n      default: true,\n      type: Boolean\n    },\n    // 播放前的回调函数\n    beforePlay: {\n      default: null,\n      type: Function\n    },\n    // 上一首前的回调函数\n    beforePrev: {\n      default: null,\n      type: Function\n    },\n    // 下一首前的回调函数\n    beforeNext: {\n      default: null,\n      type: Function\n    },\n    // 是否列表循环播放\n    isLoop: {\n      type: Boolean,\n      default: true\n    },\n    // 进度更新间隔\n    progressInterval: {\n      default: 1000,\n      type: Number\n    }\n  },\n  data: function data() {\n    return {\n      isIOS: /iPhone|iPad|iPod/i.test(window.navigator.userAgent),\n      // 是否是IOS设备\n      timer: null,\n      currentPlayIndex: 0,\n      // 当前播放的音频位置索引\n      isPlaying: true,\n      // 音频是否正在播放\n      duration: \"\",\n      // 音频持续时间\n      currentTime: \"\",\n      // 音频当前播放时间\n      currentTimeAfterFormat: \"\",\n      // 音频播放当时时间（格式化后）\n      isDragging: false // 是否正在拖拽音频进度\n\n    };\n  },\n  methods: {\n    // 当媒介元素的持续时间以及其它媒介已加载数据时运行脚本\n    onLoadedmetadata: function onLoadedmetadata(event) {\n      this.duration = this.$refs.audio.duration;\n      this.initProgressBarDrag();\n      this.$emit(\"loadedmetadata\", event);\n    },\n    // 当前的播放位置发送改变时触发\n    onTimeUpdate: function onTimeUpdate(event) {\n      this.$emit(\"timeupdate\", event);\n\n      if (this.$refs.audio.currentTime) {\n        this.currentTimeAfterFormat = this.formatTime(this.$refs.audio.currentTime);\n      }\n    },\n    // 格式化秒为分\n    formatTime: function formatTime(second) {\n      return [parseInt(second / 60 % 60), parseInt(second % 60)].join(\":\").replace(/\\b(\\d)\\b/g, \"0$1\");\n    },\n    // 音频播放完毕\n    onEnded: function onEnded(event) {\n      this.pause();\n      this.currentTimeAfterFormat = this.formatTime(this.$refs.audio.currentTime);\n      this.$emit(\"ended\", event);\n\n      if (this.isLoop) {\n        this.playNext();\n        this.play();\n      }\n    },\n    // 初始化音频进度的拖拽逻辑\n    initProgressBarDrag: function initProgressBarDrag() {\n      var _this = this;\n\n      this.$refs.audioProgressPoint.addEventListener(\"touchstart\", function (event) {\n        // 设置拖拽中\n        _this.isDragging = true;\n      }, false);\n      this.$refs.audioProgressPoint.addEventListener(\"touchmove\", function (event) {\n        var touch = event.touches[0]; // 超出左边\n\n        if (touch.pageX < _this.$refs.audioProgressWrap.offsetLeft) {\n          // 设置点点\n          _this.$refs.audioProgressPoint.style.left = 0; // 设置进度条\n\n          _this.$refs.audioProgress.style.width = 0; // 设置当前时间\n\n          _this.currentTime = 0; // 设置当前时间（格式化后）\n\n          _this.currentTimeAfterFormat = _this.formatTime(_this.currentTime);\n          return;\n        } // 超出右边\n\n\n        if (touch.pageX > _this.$refs.audioProgressWrap.offsetLeft + _this.$refs.audioProgressWrap.offsetWidth) {\n          // 设置点点\n          _this.$refs.audioProgressPoint.style.left = _this.$refs.audioProgressWrap.offsetWidth - _this.$refs.audioProgressPoint.offsetWidth + \"px\"; // 设置进度条\n\n          _this.$refs.audioProgress.style.width = _this.$refs.audioProgressWrap.offsetWidth + \"px\"; // 设置当前时间，0.1解决有的浏览器播放完了进度还会再走\n\n          _this.currentTime = _this.duration - 0.1; // 设置当前时间（格式化后）\n\n          _this.currentTimeAfterFormat = _this.formatTime(_this.currentTime);\n          return;\n        }\n\n        _this.setPointPosition(touch.pageX); // 设置进度条\n\n\n        _this.$refs.audioProgress.style.width = touch.pageX - _this.$refs.audioProgressWrap.offsetLeft + \"px\"; // 设置当前时间\n\n        _this.currentTime = _this.$refs.audioProgress.offsetWidth / _this.$refs.audioProgressWrap.offsetWidth * _this.duration; // 设置当前时间（格式化后）\n\n        _this.currentTimeAfterFormat = _this.formatTime(_this.currentTime);\n      }, false);\n      this.$refs.audioProgressPoint.addEventListener(\"touchend\", function (event) {\n        // 设置播放位置\n        _this.$refs.audio.currentTime = _this.currentTime; // 设置未拖拽\n\n        _this.isDragging = false;\n      }, false);\n    },\n    // 设置点点位置\n    setPointPosition: function setPointPosition(pageX) {\n      // 设置点点\n      this.$refs.audioProgressPoint.style.left = pageX - this.$refs.audioProgressPoint.offsetWidth / 2 - this.$refs.audioProgressWrap.offsetLeft + \"px\";\n    },\n    // 初始化音频进度的点击逻辑\n    initProgressBarPoint: function initProgressBarPoint(event) {\n      // 设置当前时间\n      this.currentTime = (event.pageX - this.$refs.audioProgressWrap.offsetLeft) / this.$refs.audioProgressWrap.offsetWidth * this.duration; // 设置播放位置\n\n      this.$refs.audio.currentTime = this.currentTime;\n      this.setPointPosition(event.pageX); // 设置进度条\n\n      this.$refs.audioProgress.style.width = event.pageX - this.$refs.audioProgressWrap.offsetLeft + \"px\"; // 设置当前时间（格式化后）\n\n      this.currentTimeAfterFormat = this.formatTime(this.currentTime);\n    },\n    // 播放中\n    playing: function playing() {\n      // 正在拖拽进度\n      if (this.isDragging) {\n        return;\n      } // console.log(this.$refs.audio.currentTime)\n      // this.currentTimeAfterFormat = this.formatTime(\n      //   this.$refs.audio.currentTime\n      // )\n      // // 设置播放进度条\n      // this.$refs.audioProgress.style.width =\n      //   (this.$refs.audio.currentTime / this.$refs.audio.duration) *\n      //     this.$refs.audioProgressWrap.offsetWidth +\n      //   'px'\n      // // 设置播放进度拖拽点\n      // this.$refs.audioProgressPoint.style.left =\n      //   (this.$refs.audio.currentTime / this.$refs.audio.duration) *\n      //     (this.$refs.audioProgressWrap.offsetWidth -\n      //       this.$refs.audioProgressPoint.offsetWidth / 2) +\n      //   'px'\n\n\n      this.$emit(\"playing\");\n    },\n    // 开始播放\n    play: function play() {\n      var _this2 = this;\n\n      var playHandler = function playHandler() {\n        _this2.$refs.audio.play();\n\n        _this2.$nextTick(function () {\n          _this2.playing();\n\n          _this2.timer = window.setInterval(_this2.playing, _this2.progressInterval);\n          _this2.isPlaying = true;\n\n          _this2.$emit(\"play\");\n        });\n      }; // 解决 iOS 异步请求后无法播放\n\n\n      if (this.isIOS) {\n        this.$refs.audio.play();\n        this.$refs.audio.pause();\n      }\n\n      if (this.beforePlay) {\n        this.beforePlay(function (state) {\n          if (state !== false) {\n            playHandler();\n          }\n        });\n        return;\n      }\n\n      playHandler();\n    },\n    // 暂停播放\n    pause: function pause() {\n      var _this3 = this;\n\n      this.$refs.audio.pause();\n      this.$nextTick(function () {\n        clearInterval(_this3.timer);\n        _this3.timer = null;\n        _this3.isPlaying = false;\n\n        _this3.$emit(\"pause\");\n      });\n    },\n    // 播放上一首\n    playPrev: function playPrev() {\n      var _this4 = this;\n\n      if (this.currentPlayIndex <= 0 && !this.isLoop) {\n        // 无上一首了\n        return;\n      }\n\n      var prevHandler = function prevHandler() {\n        if (_this4.currentPlayIndex <= 0 && _this4.isLoop) {\n          // 列表循环\n          _this4.currentPlayIndex = _this4.audioList.length - 1;\n        } else {\n          _this4.currentPlayIndex--;\n        }\n\n        _this4.$nextTick(function () {\n          _this4.play();\n\n          _this4.$emit(\"play-prev\");\n        });\n      };\n\n      if (this.beforePrev) {\n        this.beforePrev(function (state) {\n          if (state !== false) {\n            prevHandler();\n          }\n        });\n        return;\n      }\n\n      prevHandler();\n    },\n    // 播放下一首\n    playNext: function playNext() {\n      var _this5 = this;\n\n      if (this.currentPlayIndex + 1 >= this.audioList.length && !this.isLoop) {\n        // 无下一首了\n        return;\n      }\n\n      var nextHandler = function nextHandler() {\n        // 已经到达列表最后一首\n        if (_this5.currentPlayIndex + 1 >= _this5.audioList.length && _this5.isLoop) {\n          _this5.currentPlayIndex = 0;\n        } else {\n          _this5.currentPlayIndex++;\n        }\n\n        _this5.$nextTick(function () {\n          _this5.play();\n\n          _this5.$emit(\"play-next\");\n        });\n      };\n\n      if (this.beforeNext) {\n        this.beforeNext(function (state) {\n          if (state !== false) {\n            nextHandler();\n          }\n        });\n        return;\n      }\n\n      nextHandler();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.pause();\n  }\n};",{"version":3,"sources":["audio-player.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"audio-player\">\n    <div class=\"audio__btn-wrap\">\n      <div\n        v-show=\"showPrevButton\"\n        class=\"audio__play--previous\"\n        :class=\"{ disable: !isLoop && currentPlayIndex === 0 }\"\n        @click=\"playPrev\"\n      >\n        <van-icon name=\"arrow-left\" />\n      </div>\n\n      <div v-if=\"!isPlaying && showPlayButton\" @click=\"play\" class=\"audio__play--start\">\n        <van-icon name=\"play-circle-o\" />\n      </div>\n\n      <div v-else-if=\"showPlayButton\" @click=\"pause\" class=\"audio__play--pause\">\n        <van-icon name=\"pause-circle-o\" />\n      </div>\n\n      <div\n        v-show=\"showNextButton\"\n        class=\"audio__play--next\"\n        :class=\"{ disable: !isLoop && currentPlayIndex === audioList.length - 1 }\"\n        @click=\"playNext\"\n      >\n        <van-icon name=\"arrow\" />\n      </div>\n    </div>\n\n    <div\n      v-show=\"showProgressBar\"\n      class=\"audio__progress-wrap\"\n      ref=\"audioProgressWrap\"\n      @click=\"initProgressBarPoint\"\n    >\n      <div class=\"audio__progress\" ref=\"audioProgress\" />\n      <div class=\"audio__progress-point\" ref=\"audioProgressPoint\" />\n    </div>\n\n    <div v-show=\"showProgressBar\" class=\"audio__time-wrap\">\n      <div class=\"audio__current-time\">{{ currentTimeAfterFormat }}</div>\n      <div class=\"audio__duration\">{{ formatTime(duration) }}</div>\n    </div>\n\n    <audio\n      ref=\"audio\"\n      autoplay=\"autoplay\"\n      class=\"audio-player__audio\"\n      :src=\"audioList[currentPlayIndex]\"\n      @ended=\"onEnded\"\n      @timeupdate=\"onTimeUpdate\"\n      @loadedmetadata=\"onLoadedmetadata\"\n      @playing=\"playing\"\n    ></audio>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"AudioPlayer\",\n\n  props: {\n    // 音频播放列表\n    audioList: {\n      default: null,\n      type: Array\n    },\n    // 显示播放按钮\n    showPlayButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示上一首按钮\n    showPrevButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示下一首按钮\n    showNextButton: {\n      default: true,\n      type: Boolean\n    },\n    // 显示进度条\n    showProgressBar: {\n      default: true,\n      type: Boolean\n    },\n    // 播放前的回调函数\n    beforePlay: {\n      default: null,\n      type: Function\n    },\n    // 上一首前的回调函数\n    beforePrev: {\n      default: null,\n      type: Function\n    },\n    // 下一首前的回调函数\n    beforeNext: {\n      default: null,\n      type: Function\n    },\n    // 是否列表循环播放\n    isLoop: {\n      type: Boolean,\n      default: true\n    },\n    // 进度更新间隔\n    progressInterval: {\n      default: 1000,\n      type: Number\n    }\n  },\n\n  data() {\n    return {\n      isIOS: /iPhone|iPad|iPod/i.test(window.navigator.userAgent), // 是否是IOS设备\n      timer: null,\n      currentPlayIndex: 0, // 当前播放的音频位置索引\n      isPlaying: true, // 音频是否正在播放\n      duration: \"\", // 音频持续时间\n      currentTime: \"\", // 音频当前播放时间\n      currentTimeAfterFormat: \"\", // 音频播放当时时间（格式化后）\n      isDragging: false // 是否正在拖拽音频进度\n    };\n  },\n\n  methods: {\n    // 当媒介元素的持续时间以及其它媒介已加载数据时运行脚本\n    onLoadedmetadata(event) {\n      this.duration = this.$refs.audio.duration;\n      this.initProgressBarDrag();\n      this.$emit(\"loadedmetadata\", event);\n    },\n    // 当前的播放位置发送改变时触发\n    onTimeUpdate(event) {\n      this.$emit(\"timeupdate\", event);\n      if (this.$refs.audio.currentTime) {\n        this.currentTimeAfterFormat = this.formatTime(\n          this.$refs.audio.currentTime\n        );\n      }\n    },\n    // 格式化秒为分\n    formatTime(second) {\n      return [parseInt((second / 60) % 60), parseInt(second % 60)]\n        .join(\":\")\n        .replace(/\\b(\\d)\\b/g, \"0$1\");\n    },\n    // 音频播放完毕\n    onEnded(event) {\n      this.pause();\n      this.currentTimeAfterFormat = this.formatTime(\n        this.$refs.audio.currentTime\n      );\n      this.$emit(\"ended\", event);\n\n      if (this.isLoop) {\n        this.playNext();\n        this.play();\n      }\n    },\n    // 初始化音频进度的拖拽逻辑\n    initProgressBarDrag() {\n      this.$refs.audioProgressPoint.addEventListener(\n        \"touchstart\",\n        event => {\n          // 设置拖拽中\n          this.isDragging = true;\n        },\n        false\n      );\n      this.$refs.audioProgressPoint.addEventListener(\n        \"touchmove\",\n        event => {\n          let touch = event.touches[0];\n\n          // 超出左边\n          if (touch.pageX < this.$refs.audioProgressWrap.offsetLeft) {\n            // 设置点点\n            this.$refs.audioProgressPoint.style.left = 0;\n            // 设置进度条\n            this.$refs.audioProgress.style.width = 0;\n            // 设置当前时间\n            this.currentTime = 0;\n            // 设置当前时间（格式化后）\n            this.currentTimeAfterFormat = this.formatTime(this.currentTime);\n            return;\n          }\n\n          // 超出右边\n          if (\n            touch.pageX >\n            this.$refs.audioProgressWrap.offsetLeft +\n              this.$refs.audioProgressWrap.offsetWidth\n          ) {\n            // 设置点点\n            this.$refs.audioProgressPoint.style.left =\n              this.$refs.audioProgressWrap.offsetWidth -\n              this.$refs.audioProgressPoint.offsetWidth +\n              \"px\";\n            // 设置进度条\n            this.$refs.audioProgress.style.width =\n              this.$refs.audioProgressWrap.offsetWidth + \"px\";\n            // 设置当前时间，0.1解决有的浏览器播放完了进度还会再走\n            this.currentTime = this.duration - 0.1;\n            // 设置当前时间（格式化后）\n            this.currentTimeAfterFormat = this.formatTime(this.currentTime);\n            return;\n          }\n\n          this.setPointPosition(touch.pageX);\n          // 设置进度条\n          this.$refs.audioProgress.style.width =\n            touch.pageX - this.$refs.audioProgressWrap.offsetLeft + \"px\";\n          // 设置当前时间\n          this.currentTime =\n            (this.$refs.audioProgress.offsetWidth /\n              this.$refs.audioProgressWrap.offsetWidth) *\n            this.duration;\n          // 设置当前时间（格式化后）\n          this.currentTimeAfterFormat = this.formatTime(this.currentTime);\n        },\n        false\n      );\n      this.$refs.audioProgressPoint.addEventListener(\n        \"touchend\",\n        event => {\n          // 设置播放位置\n          this.$refs.audio.currentTime = this.currentTime;\n          // 设置未拖拽\n          this.isDragging = false;\n        },\n        false\n      );\n    },\n    // 设置点点位置\n    setPointPosition(pageX) {\n      // 设置点点\n      this.$refs.audioProgressPoint.style.left =\n        pageX -\n        this.$refs.audioProgressPoint.offsetWidth / 2 -\n        this.$refs.audioProgressWrap.offsetLeft +\n        \"px\";\n    },\n    // 初始化音频进度的点击逻辑\n    initProgressBarPoint(event) {\n      // 设置当前时间\n      this.currentTime =\n        ((event.pageX - this.$refs.audioProgressWrap.offsetLeft) /\n          this.$refs.audioProgressWrap.offsetWidth) *\n        this.duration;\n      // 设置播放位置\n      this.$refs.audio.currentTime = this.currentTime;\n      this.setPointPosition(event.pageX);\n      // 设置进度条\n      this.$refs.audioProgress.style.width =\n        event.pageX - this.$refs.audioProgressWrap.offsetLeft + \"px\";\n      // 设置当前时间（格式化后）\n      this.currentTimeAfterFormat = this.formatTime(this.currentTime);\n    },\n    // 播放中\n    playing() {\n      // 正在拖拽进度\n      if (this.isDragging) {\n        return;\n      }\n      // console.log(this.$refs.audio.currentTime)\n      // this.currentTimeAfterFormat = this.formatTime(\n      //   this.$refs.audio.currentTime\n\n      // )\n\n      // // 设置播放进度条\n      // this.$refs.audioProgress.style.width =\n      //   (this.$refs.audio.currentTime / this.$refs.audio.duration) *\n      //     this.$refs.audioProgressWrap.offsetWidth +\n      //   'px'\n      // // 设置播放进度拖拽点\n      // this.$refs.audioProgressPoint.style.left =\n      //   (this.$refs.audio.currentTime / this.$refs.audio.duration) *\n      //     (this.$refs.audioProgressWrap.offsetWidth -\n      //       this.$refs.audioProgressPoint.offsetWidth / 2) +\n      //   'px'\n      this.$emit(\"playing\");\n    },\n    // 开始播放\n    play() {\n      let playHandler = () => {\n        this.$refs.audio.play();\n        this.$nextTick(() => {\n          this.playing();\n          this.timer = window.setInterval(this.playing, this.progressInterval);\n          this.isPlaying = true;\n          this.$emit(\"play\");\n        });\n      };\n\n      // 解决 iOS 异步请求后无法播放\n      if (this.isIOS) {\n        this.$refs.audio.play();\n        this.$refs.audio.pause();\n      }\n\n      if (this.beforePlay) {\n        this.beforePlay(state => {\n          if (state !== false) {\n            playHandler();\n          }\n        });\n        return;\n      }\n\n      playHandler();\n    },\n    // 暂停播放\n    pause() {\n      this.$refs.audio.pause();\n      this.$nextTick(() => {\n        clearInterval(this.timer);\n        this.timer = null;\n        this.isPlaying = false;\n        this.$emit(\"pause\");\n      });\n    },\n    // 播放上一首\n    playPrev() {\n      if (this.currentPlayIndex <= 0 && !this.isLoop) {\n        // 无上一首了\n        return;\n      }\n\n      let prevHandler = () => {\n        if (this.currentPlayIndex <= 0 && this.isLoop) {\n          // 列表循环\n          this.currentPlayIndex = this.audioList.length - 1;\n        } else {\n          this.currentPlayIndex--;\n        }\n\n        this.$nextTick(() => {\n          this.play();\n          this.$emit(\"play-prev\");\n        });\n      };\n\n      if (this.beforePrev) {\n        this.beforePrev(state => {\n          if (state !== false) {\n            prevHandler();\n          }\n        });\n        return;\n      }\n      prevHandler();\n    },\n    // 播放下一首\n    playNext() {\n      if (this.currentPlayIndex + 1 >= this.audioList.length && !this.isLoop) {\n        // 无下一首了\n        return;\n      }\n\n      let nextHandler = () => {\n        // 已经到达列表最后一首\n        if (this.currentPlayIndex + 1 >= this.audioList.length && this.isLoop) {\n          this.currentPlayIndex = 0;\n        } else {\n          this.currentPlayIndex++;\n        }\n\n        this.$nextTick(() => {\n          this.play();\n          this.$emit(\"play-next\");\n        });\n      };\n\n      if (this.beforeNext) {\n        this.beforeNext(state => {\n          if (state !== false) {\n            nextHandler();\n          }\n        });\n        return;\n      }\n\n      nextHandler();\n    }\n  },\n\n  beforeDestroy() {\n    this.pause();\n  }\n};\n</script>\n\n<style>\n.audio-player {\n  margin: 0 15px;\n}\n\n.audio-player .audio__btn-wrap {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.audio-player .audio__btn-wrap .audio__play__icon {\n  width: 100%;\n  height: 100%;\n  fill: currentColor;\n  overflow: hidden;\n  color: #e35924;\n}\n\n.audio-player .audio__btn-wrap .audio__play--previous {\n  font-size: 33px;\n  width: 21px;\n  height: 33px;\n}\n\n.audio-player .audio__btn-wrap .audio__play--previous.disable {\n  opacity: 0.5;\n}\n\n.audio-player .audio__btn-wrap .audio__play--start {\n  font-size: 42px;\n  width: 42px;\n  height: 42px;\n  margin: 0 30px 0 40px;\n}\n\n.audio-player .audio__btn-wrap .audio__play--pause {\n  font-size: 42px;\n  width: 42px;\n  height: 42px;\n  margin: 0 30px 0 40px;\n}\n\n.audio-player .audio__btn-wrap .audio__play--next {\n  font-size: 33px;\n  width: 21px;\n  height: 33px;\n}\n\n.audio-player .audio__btn-wrap .audio__play--next.disable {\n  opacity: 0.5;\n}\n\n.audio-player .audio__progress-wrap {\n  position: relative;\n  background: #ddd;\n  height: 2px;\n  margin-top: 20px;\n}\n\n.audio-player .audio__progress-wrap .audio__progress {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 0;\n  background: #e35924;\n}\n\n.audio-player .audio__progress-wrap .audio__progress-point {\n  position: absolute;\n  left: 0;\n  top: 50%;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  margin-top: -8px;\n  background: #e35924;\n  box-shadow: 0 0 10px 1px rgba(227, 89, 36, 0.5);\n}\n\n.audio-player .audio__progress-wrap .audio__progress-point:after {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 8px;\n  height: 8px;\n  margin: -4px 0 0 -4px;\n  background: #fff;\n  border-radius: 50%;\n}\n\n.audio-player .audio__time-wrap {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-top: 7px;\n}\n\n.audio-player .audio__time-wrap .audio__current-time {\n  font-size: 10px;\n  color: #888;\n}\n\n.audio-player .audio__time-wrap .audio__duration {\n  font-size: 10px;\n  color: #888;\n}\n\n.audio-player .audio-player__audio {\n  display: block;\n  margin: 0 auto;\n}\n</style>\n"],"sourceRoot":"src/components"}]}