{"remainingRequest":"/Users/mark/vue/vue-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mark/vue/vue-test/src/components/Vue-player.vue?vue&type=style&index=0&id=f5042190&scoped=true&lang=css&","dependencies":[{"path":"/Users/mark/vue/vue-test/src/components/Vue-player.vue","mtime":1603363233207},{"path":"/Users/mark/vue/vue-test/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/mark/vue/vue-test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mark/vue/vue-test/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mark/vue/vue-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mark/vue/vue-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.player {\n  position: fixed;\n  width: 100%;\n  background-color: white;\n  bottom: 0;\n}\n\n",{"version":3,"sources":["Vue-player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;AACA;AACA","file":"Vue-player.vue","sourceRoot":"src/components","sourcesContent":["<template>\n     <div class=\"player\" v-if=\"songUrl\" v-show=\"showAplayer\">\n     \n        <aplayer\n          ref=\"aplayer\"\n          autoplay\n          @timeupdate=\"timeupdate\"\n          @pause=\"handleEvent\"\n          :list=\"playList\"\n          :music=\"{\n            title: this.songName,\n            artist: this.songArtist,\n            src: this.songUrl,\n            pic: this.songImg, \n          }\"\n          :currentTime=\"0\"\n          fixed\n          listFolded\n          @canplay=\"handleEvent\"\n          @play=\"play\"\n          @abort=\"handleEvent\"\n          @canplaythrough=\"handleEvent\"\n          @durationchange=\"handleEvent\"\n          @emptied=\"handleEvent\"\n          @ended=\"handleEvent\"\n          @error=\"handleEvent\"\n          @loadeddata=\"handleEvent\"\n          @loadedmetadata=\"handleEvent\"\n          @loadstart=\"handleEvent\"\n          @playing=\"isplaying\"\n          @progress=\"handleEvent\"\n          @ratechange=\"handleEvent\"\n          @readystatechange=\"handleEvent\"\n          @seeked=\"handleEvent\"\n          @seeking=\"handleEvent\"\n          @stalled=\"handleEvent\"\n          @suspend=\"handleEvent\"\n          @volumechange=\"handleEvent\"\n          @waiting=\"handleEvent\"\n        />\n      \n    </div>\n</template>>\n\n<script>\nimport Aplayer from \"vue-aplayer\";\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n    name: \"app\",\n    data: () => ({\n    musicInfo: {}\n  }),\n  components: {\n    Aplayer\n  },\n    watch: {\n    songUrl: function(val) {\n      if (val) {\n        this.show = true;\n        setTimeout(() => {\n          let aplayer = this.$refs.aplayer;\n          aplayer.play();\n        }, 1000);\n      }\n    },\n    songId(val) {\n      if (val) {\n        this.getMusicInfo();\n      }\n    },\n    playing(val) {\n      console.log(val);\n      if (!val) {\n        this.$refs.aplayer.pause();\n      } else {\n        this.$refs.aplayer.play();\n      }\n    },\n    showAplayer(val) {\n      // console.log(val)\n    }\n  },\n  created() {\n    this.show = false;\n  },\n  async mounted() {},\n  computed: {\n    ...mapState([\n      \"songArtist\",\n      \"songId\",\n      \"songImg\",\n      \"songName\",\n      \"songUrl\",\n      \"playing\",\n      \"showAplayer\",\n      \"playList\"\n    ])\n  },\n  methods: {\n    ...mapActions([\n      \"setSongNameActions\",\n      \"setDurationActions\",\n      \"setSongIdActions\",\n      \"setSongUrlActions\",\n      \"setSongImgActions\",\n      \"setSongArtistActions\",\n      \"setCurrentTimeActions\",\n      \"setPlayingActions\"\n    ]),\n    handleEvent(e) {\n      // console.log(e);\n    },\n    isplay(e) {\n      this.setPlayingActions(true);\n    },\n    play(e) {\n      this.setPlayingActions(true);\n      this.setDurationActions(e.target.duration);\n    },\n    isplaying(e) {\n      console.log(e);\n    },\n    ispause(e) {\n       console.log(e);\n      this.setPlayingActions(false);\n    },\n    timeupdate(e) {\n      this.setCurrentTimeActions(e.target.currentTime);\n    },\n    async getMusicInfo() {\n      const songData = await this.$http.get(this.host + \"/song/detail\", {\n        params: {\n          ids: this.$route.params.id\n        }\n      });\n      this.setSongNameActions(songData.data.songs[0].name);\n      this.setSongIdActions(songData.data.songs[0].id);\n      this.setSongImgActions(songData.data.songs[0].al.picUrl);\n      this.setSongArtistActions(songData.data.songs[0].ar[0].name);\n\n      const this_ = this;\n      this.$http\n        .get(this.host + \"/song/url\", { params: { id: this.$route.params.id } })\n        .then(response => {\n          this.setSongUrlActions(response.data.data[0].url);\n        })\n        .catch(error => {\n          console.log(\"接口或处理逻辑出错\");\n        });\n    }\n  }\n}\n</script>>\n<style scoped>\n.player {\n  position: fixed;\n  width: 100%;\n  background-color: white;\n  bottom: 0;\n}\n\n</style>"]}]}