{"remainingRequest":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mc/项目/VUE/2020/node_modules/vue-music-component/src/Music.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mc/项目/VUE/2020/node_modules/vue-music-component/src/Music.vue","mtime":1519744616000},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"vueMusicComponent\",\r\n  data() {\r\n    return {\r\n      isShow: true,\r\n      name: \"\",\r\n      singer: \"\",\r\n      pic_small: \"\",\r\n      audio: \"\",\r\n      lrc: [],\r\n      idx: 0\r\n    };\r\n  },\r\n  props: [\"musicList\", \"iNow\", \"isPlay\"],\r\n  mounted() {\r\n    // 定义歌词的滚动事件\r\n    this.$refs.musicAudio.ontimeupdate = () => {\r\n      let iTime = this.$refs.musicAudio.currentTime;\r\n      this.lrc.forEach((item, key) => {\r\n        if (this.idx == 0 && iTime < item[0]) {\r\n          this.idx = 0;\r\n        }\r\n        if (\r\n          iTime >= item[0] &&\r\n          (this.lrc[key + 1] == undefined || iTime < this.lrc[key + 1][0])\r\n        ) {\r\n          this.idx = key;\r\n        }\r\n      });\r\n      this.$refs.lrcScroll.scrollTop = 26 * this.idx;\r\n    };\r\n  },\r\n  watch: {\r\n    iNow() {\r\n      if (this.iNow != null) {\r\n        this.name = this.musicList[this.iNow].album_title;\r\n        this.singer = this.musicList[this.iNow].artist_name;\r\n        this.pic_small = this.musicList[this.iNow].pic_small;\r\n        this.audio = this.musicList[this.iNow].src;\r\n        axios\r\n          .get(this.musicList[this.iNow].lrcSrc)\r\n          .then(res => {\r\n            this.parseLyric(res.data);\r\n            this.idx = 0;\r\n          })\r\n          .catch(() => {\r\n            console.log(\"error\");\r\n          });\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    changeInow(num) {\r\n      // 点击时切换歌曲\r\n      this.iNow = num;\r\n      this.isPlay = true;\r\n    },\r\n    prev() {\r\n      // 上一首\r\n      this.iNow--;\r\n      if (this.iNow == -1) {\r\n        this.iNow = this.musicList.length - 1;\r\n      }\r\n      this.isPlay = true;\r\n    },\r\n    changeState() {\r\n      // 播放和暂停切换\r\n      if (this.$refs.musicAudio.paused) {\r\n        this.$refs.musicAudio.play();\r\n        this.isPlay = true;\r\n      } else {\r\n        this.$refs.musicAudio.pause();\r\n        this.isPlay = false;\r\n      }\r\n    },\r\n    parseLyric(text) {\r\n      let lyric = text.split(\"\\n\"); //先按行分割\r\n      let _l = lyric.length; //获取歌词行数\r\n      let lrc = new Array(); //新建一个数组存放最后结果\r\n      for (let i = 0; i < _l; i++) {\r\n        let d = lyric[i].match(/\\[\\d{2}:\\d{2}((\\.|\\:)\\d{2,})\\]/g); //正则匹配播放时间\r\n        let t = lyric[i].split(d); //以时间为分割点分割每行歌词，数组最后一个为歌词正文\r\n        // let t = lyric[i].split(']'); //以时间为分割点分割每行歌词，数组最后一个为歌词正文\r\n        if (d != null) {\r\n          //过滤掉空行等非歌词正文部分\r\n          //换算时间，保留两位小数\r\n          let dt = String(d).split(\":\");\r\n          let _t =\r\n            parseInt(dt[0].split(\"[\")[1]) * 60 +\r\n            parseFloat(dt[1].split(\"]\")[0]);\r\n          lrc.push([_t, t[1]]);\r\n        }\r\n      }\r\n      this.lrc = lrc;\r\n    },\r\n    changeMusic() {\r\n      // 自动播放下一首\r\n      this.iNow++;\r\n      if (this.iNow == this.musicList.length) {\r\n        this.iNow = 0;\r\n      }\r\n      this.isPlay = true;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Music.vue"],"names":[],"mappingsfile":"Music.vue","sourceRoot":"node_modules/vue-music-component/src","sourcesContent":["<template>\r\n  <div id=\"music\">\r\n    <img :src=\"pic_small\" class=\"blur\">    \r\n    <div class=\"album-info\" @click=\"isShow=false\">\r\n      <div class=\"album-left\">\r\n        <img :src=\"pic_small\">\r\n      </div>\r\n      <div class=\"alubum-right\">\r\n        <p v-text=\"name\" class=\"title\"></p>\r\n        <p v-text=\"singer\" class=\"singer\"></p>\r\n      </div>\r\n      <div class=\"controls\" @click.stop>\r\n        <i class=\"icon iconfont icon-shangyishou\" @click=\"prev\"></i>\r\n        <i class=\"icon iconfont icon-bofang\" v-show=\"!isPlay\" @click=\"changeState\"></i>\r\n        <i class=\"icon iconfont icon-zanting\" v-show=\"isPlay\" @click=\"changeState\"></i>\r\n        <i class=\"icon iconfont icon-xiayishou\" @click=\"changeMusic\"></i>\r\n      </div>\r\n      <span class=\"menu\" @click.stop=\"isShow=!isShow\">菜单</span>\r\n    </div>\r\n    <div class=\"lrc\" @click=\"isShow=false\" ref=\"lrcScroll\">\r\n      <p class=\"empty\" v-for=\"index in 5\" :key=\"index-100\" v-text=\"index\"></p>\r\n      <p :class=\"{selected: idx==index}\" v-for=\"(obj, index) in lrc\" :key=\"index\" v-text=\"obj[1]\"></p>\r\n      <p class=\"empty\" v-for=\"index in 5\" :key=\"index-50\" v-text=\"index\"></p>      \r\n    </div>\r\n    <audio ref=\"musicAudio\" @playing=\"isPlay=true\" @pause=\"isPlay=false\" class=\"controler\" :src=\"audio\" @ended=\"changeMusic\" :autoplay=\"isPlay\" controls></audio>              \r\n\r\n    <transition-group tag=\"div\" name=\"slide\">\r\n      <div :key=\"-100\" class=\"music-list\" v-show=\"isShow\">\r\n        <div class=\"music-title\">歌单列表</div>              \r\n        <ul>\r\n          <li v-for=\"(obj, index) in musicList\" :key=\"obj.album_id\" class=\"music-info\" :class=\"{selected: iNow==index}\" @click=\"changeInow(index)\">\r\n            <div v-text=\"index + 1\" class=\"info-left\"></div>\r\n            <div class=\"info-right\">\r\n              <span v-text=\"obj.album_title\"></span> - \r\n              <span v-text=\"obj.artist_name\"></span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </transition-group>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"vueMusicComponent\",\r\n  data() {\r\n    return {\r\n      isShow: true,\r\n      name: \"\",\r\n      singer: \"\",\r\n      pic_small: \"\",\r\n      audio: \"\",\r\n      lrc: [],\r\n      idx: 0\r\n    };\r\n  },\r\n  props: [\"musicList\", \"iNow\", \"isPlay\"],\r\n  mounted() {\r\n    // 定义歌词的滚动事件\r\n    this.$refs.musicAudio.ontimeupdate = () => {\r\n      let iTime = this.$refs.musicAudio.currentTime;\r\n      this.lrc.forEach((item, key) => {\r\n        if (this.idx == 0 && iTime < item[0]) {\r\n          this.idx = 0;\r\n        }\r\n        if (\r\n          iTime >= item[0] &&\r\n          (this.lrc[key + 1] == undefined || iTime < this.lrc[key + 1][0])\r\n        ) {\r\n          this.idx = key;\r\n        }\r\n      });\r\n      this.$refs.lrcScroll.scrollTop = 26 * this.idx;\r\n    };\r\n  },\r\n  watch: {\r\n    iNow() {\r\n      if (this.iNow != null) {\r\n        this.name = this.musicList[this.iNow].album_title;\r\n        this.singer = this.musicList[this.iNow].artist_name;\r\n        this.pic_small = this.musicList[this.iNow].pic_small;\r\n        this.audio = this.musicList[this.iNow].src;\r\n        axios\r\n          .get(this.musicList[this.iNow].lrcSrc)\r\n          .then(res => {\r\n            this.parseLyric(res.data);\r\n            this.idx = 0;\r\n          })\r\n          .catch(() => {\r\n            console.log(\"error\");\r\n          });\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    changeInow(num) {\r\n      // 点击时切换歌曲\r\n      this.iNow = num;\r\n      this.isPlay = true;\r\n    },\r\n    prev() {\r\n      // 上一首\r\n      this.iNow--;\r\n      if (this.iNow == -1) {\r\n        this.iNow = this.musicList.length - 1;\r\n      }\r\n      this.isPlay = true;\r\n    },\r\n    changeState() {\r\n      // 播放和暂停切换\r\n      if (this.$refs.musicAudio.paused) {\r\n        this.$refs.musicAudio.play();\r\n        this.isPlay = true;\r\n      } else {\r\n        this.$refs.musicAudio.pause();\r\n        this.isPlay = false;\r\n      }\r\n    },\r\n    parseLyric(text) {\r\n      let lyric = text.split(\"\\n\"); //先按行分割\r\n      let _l = lyric.length; //获取歌词行数\r\n      let lrc = new Array(); //新建一个数组存放最后结果\r\n      for (let i = 0; i < _l; i++) {\r\n        let d = lyric[i].match(/\\[\\d{2}:\\d{2}((\\.|\\:)\\d{2,})\\]/g); //正则匹配播放时间\r\n        let t = lyric[i].split(d); //以时间为分割点分割每行歌词，数组最后一个为歌词正文\r\n        // let t = lyric[i].split(']'); //以时间为分割点分割每行歌词，数组最后一个为歌词正文\r\n        if (d != null) {\r\n          //过滤掉空行等非歌词正文部分\r\n          //换算时间，保留两位小数\r\n          let dt = String(d).split(\":\");\r\n          let _t =\r\n            parseInt(dt[0].split(\"[\")[1]) * 60 +\r\n            parseFloat(dt[1].split(\"]\")[0]);\r\n          lrc.push([_t, t[1]]);\r\n        }\r\n      }\r\n      this.lrc = lrc;\r\n    },\r\n    changeMusic() {\r\n      // 自动播放下一首\r\n      this.iNow++;\r\n      if (this.iNow == this.musicList.length) {\r\n        this.iNow = 0;\r\n      }\r\n      this.isPlay = true;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nul {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n#music {\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.album-info {\r\n  padding: 10% 4%;\r\n  height: 8%;\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  overflow: hidden;\r\n  color: #ffffff;\r\n  background: rgba(0, 0, 0, 0.35);\r\n}\r\n.blur {\r\n  filter: blur(20px);\r\n  position: absolute;\r\n  top: 0;\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.album-left {\r\n  flex-grow: 1;\r\n  width: 0;\r\n  margin-right: 4%;\r\n}\r\n.album-left img {\r\n  width: 100%;\r\n}\r\n.alubum-right {\r\n  flex-grow: 3;\r\n  width: 0;\r\n}\r\n.alubum-right .title {\r\n  font-size: 120%;\r\n  margin: 0;\r\n}\r\n.alubum-right .singer {\r\n  margin: 0;\r\n  font-size: 90%;\r\n}\r\n/*上方控制台*/\r\n.controls {\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 10%;\r\n  width: 30%;\r\n  transform: translate(0, -50%);\r\n  display: flex;\r\n}\r\n.iconfont {\r\n  flex-grow: 1;\r\n  font-size: 180%;\r\n  width: 0;\r\n  cursor: pointer;\r\n}\r\n.menu {\r\n  position: absolute;\r\n  right: 6%;\r\n  bottom: 6%;\r\n  cursor: pointer;\r\n}\r\n/*歌词*/\r\n.lrc {\r\n  position: absolute;\r\n  top: 30%;\r\n  bottom: 10%;\r\n  left: 0;\r\n  right: 0;\r\n  text-align: center;\r\n  color: #000000;\r\n  overflow-y: scroll;\r\n}\r\n.lrc p {\r\n  font-size: 80%;\r\n  transition: all 0.5s ease-out;\r\n}\r\n.lrc .empty {\r\n  color: transparent;\r\n}\r\n.lrc .selected {\r\n  font-size: 130%;\r\n  color: #eeeeee;\r\n}\r\n.controler {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n}\r\n/*歌单列表*/\r\n.music-list {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  color: #ffffff;\r\n}\r\n.music-list ul {\r\n  overflow-y: scroll;\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 10%;\r\n  bottom: 0;\r\n}\r\n.music-list .music-title {\r\n  text-align: center;\r\n  height: 10%;\r\n}\r\n.music-list .music-info {\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #000000;\r\n  padding: 6%;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.music-info .info-left {\r\n  flex-grow: 1;\r\n  text-align: center;\r\n  width: 0;\r\n}\r\n.music-info .info-right {\r\n  flex-grow: 9;\r\n  width: 0;\r\n}\r\n.music-list .selected {\r\n  background: rgba(255, 255, 255, 0.4);\r\n  color: #000000;\r\n}\r\n.slide-enter {\r\n  top: 100%;\r\n}\r\n.slide-enter-to {\r\n  top: 50%;\r\n}\r\n.slide-enter-active,\r\n.slide-leave-active {\r\n  transition: top 1s ease;\r\n}\r\n.slide-leave {\r\n  top: 50%;\r\n}\r\n.slide-leave-to {\r\n  top: 100%;\r\n}\r\n\r\n@font-face {\r\n  font-family: \"iconfont\";\r\n  src: url(\"/static/font/iconfont.eot?t=1517733299011\"); /* IE9*/\r\n  src: url(\"/static/font/iconfont.eot?t=1517733299011#iefix\")\r\n      format(\"embedded-opentype\"),\r\n    url(\"data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAZ8AAsAAAAACmgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFZW7kioY21hcAAAAYAAAAB3AAAByJvo0U9nbHlmAAAB+AAAAmUAAAPc9yWvdGhlYWQAAARgAAAALwAAADYQWRFhaGhlYQAABJAAAAAcAAAAJAfeA4dobXR4AAAErAAAABMAAAAYF+kAAGxvY2EAAATAAAAADgAAAA4DpgKEbWF4cAAABNAAAAAfAAAAIAEVAF1uYW1lAAAE8AAAAUUAAAJtPlT+fXBvc3QAAAY4AAAAQgAAAFgrUudveJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2Bk/sM4gYGVgYOpk+kMAwNDP4RmfM1gxMjBwMDEwMrMgBUEpLmmMDgwVDzbxdzwv4EhhrmBoQEozAiSAwAydg0qeJzFkcENhDAMBMckwOlEGTxTCaIexOMqoyC3wa0TeFABG02UXdlyJAM9kEQRGeyHEdqUWs0T35pnFvmJD53eu48+e/HjPJU+3S1T9X3CJU3L6sYGXpO9N/qpqd7r5WIP+4W+6GMjduNzI2q8NGJXfjTo/s1uG48AeJydU89rE0EUfm9mZzZp0427SXaTTfNjd5sdtW0wabpBalsoUqp4UPQiePFcLfTUSw+5iCIeRDx7EMFD/4ViQQiBHvScUyn6JxQqVqfO2mrTeqrDzOO9t/MN38f7FhjA4S7dpHnIwEVowHW4DYB8HH2DlNATrToZx5zHck7WoCIQnh74dTqLjs+zdjNqhQ7XeRoNLOOU14xEnQicbs2RGWzaJcRC0b1r1UYt+hKH8qL8RN4kbzFXCUbTc5PyxsR8tlnNJNZSllWwrBcJzliCEC1t4GPHTrLkEJfvWNrNbVYukQqmCsK9dX+kWrQePmutlGpOErHTwUyxaryfN11T7XXXzlgF/cJIIu+OBGNZXPs6nM+kSuEXUCvW2tGAdiAFBbgMM3BNNUMQEbRtcDjopjoqU7Xq6mV0TAODhh8Kcw7bDe9sY4pAX+5wjl6/jx7ncqfflQeMIet2kTEmD7odt4ZYc48iwmBFO4PA+CH6OYYMPvEU/aLkbhC4+L3o4+kq1qQpTR/oR7oAwzAGk3BVTc/AmLoiWMeMmo4v6ijCVls1oqajvthZnVPGHWa3zZAFXDdtZypSOYEtqVhv/Y73osWlN0uLy2W1lk/SdbmnaZjiiHLzgYaoxYEu/EGp+PPK9BnMUYob25q2TTi+5gQ1uRKD8ZX2/xomMVTU27WofU4N8pvcUwI4prTn59Owq/jLR5xsa59OSQD611vD4EAQ/0MnVqIDHqMiVGTLOI9R61/79OS+mn2y18OkIrIvNiZmEWfqG+PKLMcmOb7+ozFwr6dwxF4tedOHEFVHV/07itIvet/aoQAAAHicY2BkYGAA4tfu0ofi+W2+MnCzMIDAtTnPNiHo/w0sDMwNQC4HAxNIFABSCwvkAHicY2BkYGBu+N/AEMPCAAJAkpEBFbABAEcMAm94nGNhYGBgfsnAwMKAigESnwEBAAAAAAAAdgDgAUIBpAHuAAB4nGNgZGBgYGMIZGBlAAEmIOYCQgaG/2A+AwARSAFzAHicZY9NTsMwEIVf+gekEqqoYIfkBWIBKP0Rq25YVGr3XXTfpk6bKokjx63UA3AejsAJOALcgDvwSCebNpbH37x5Y08A3OAHHo7fLfeRPVwyO3INF7gXrlN/EG6QX4SbaONVuEX9TdjHM6bCbXRheYPXuGL2hHdhDx18CNdwjU/hOvUv4Qb5W7iJO/wKt9Dx6sI+5l5XuI1HL/bHVi+cXqnlQcWhySKTOb+CmV7vkoWt0uqca1vEJlODoF9JU51pW91T7NdD5yIVWZOqCas6SYzKrdnq0AUb5/JRrxeJHoQm5Vhj/rbGAo5xBYUlDowxQhhkiMro6DtVZvSvsUPCXntWPc3ndFsU1P9zhQEC9M9cU7qy0nk6T4E9XxtSdXQrbsuelDSRXs1JErJCXta2VELqATZlV44RelzRiT8oZ0j/AAlabsgAAAB4nGNgYoAALgbsgI2RiZGZkYWRlZGNkZ2BsYK9KjGvJDMvnbs4IzEvvTKzOCO/lLMiMxHCYkvKTwMKMzAAAELzDssAAA==\")\r\n      format(\"woff\"),\r\n    url(\"/static/font/iconfont.ttf?t=1517733299011\") format(\"truetype\"),\r\n    url(\"/static/font/iconfont.svg?t=1517733299011#iconfont\") format(\"svg\"); /* iOS 4.1- */\r\n}\r\n\r\n.iconfont {\r\n  font-family: \"iconfont\" !important;\r\n  font-style: normal;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.icon-zanting:before {\r\n  content: \"\\e6ba\";\r\n}\r\n\r\n.icon-shangyishou:before {\r\n  content: \"\\e607\";\r\n}\r\n\r\n.icon-xiayishou:before {\r\n  content: \"\\e62c\";\r\n}\r\n\r\n.icon-bofang:before {\r\n  content: \"\\e624\";\r\n}\r\n</style>\r\n"]}]}