{"remainingRequest":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mc/项目/VUE/2020/src/pages/player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mc/项目/VUE/2020/src/pages/player.vue","mtime":1602751209471},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from \"vuex\";\nimport AudioPlayer  from \"../components/audio-player\";\nimport '@liripeng/vue-audio-player/lib/vue-audio-player.css'\n \nimport LyricScroll from \"vue-lyric-scroll\";\n \n\nexport default {\n  name: \"app\",\n  data() {\n    return { \n      audioSources: {},\n      audioList: [],\n      duration: {},\n      timeupdate: {},\n      currentTime: 0,\n      isPlaying:false,\n      xuzhuan: \"Rotation\",\n      lyric: {},\n      active:\"lyric-active\"\n      \n    };\n  },\n  components: {\n    AudioPlayer,\n    LyricScroll\n  },\n  watch: {\n    isPlaying(old, nw) {\n      //监听正在播放的歌曲改变\n       console.log(this.$refs.audioPlayer)\n    },\n    audioList(old,news){\n       \n      \n      \n    }\n  },\n  methods: {\n    play(){\n\n    },\n    stopP() {\n      this.isPlaying = false;\n    },\n    Playing() {\n      this.isPlaying = true; \n      \n\n    },\n    onTimeUpdate(e) {\n      this.currentTime = e.target.currentTime;\n      \n    },\n    getDuration() {\n      let audio = this.$refs.audioPlayer;\n     \n      //此时可以获取到duration\n      this.duration = audio.duration;\n    },\n        timeStrToNum(str) {\n      const minute = Number(str.slice(0, 2))\n      const second = Number(str.slice(3, 5))\n      const minSec = Number(str.slice(6, 8))\n      return minute * 60 + second + minSec / 100\n    },\n    // 将歌词字符串转换为对象，格式为{开始时间: 歌词, ...}\n    lyricToObj(lyricStr) {\n            \n        \n      const obj = {}\n      let perLyric\n      let time\n      lyricStr.split('\\n').forEach((item, idx) => {\n        perLyric = item.slice(item.indexOf(']') + 1)\n        if (perLyric) {\n          time = this.timeStrToNum(item.slice(1, 9))\n          obj[time] = perLyric\n        }\n      })\n      return obj\n    },\n    updateTime(e) {\n      this.currentTime = e.target.currentTime; //获取audio当前播放时间\n    },\n\n    onClickLeft() {\n      this.$router.go(-1); //返回上一层\n    },\n    onBeforePlay(next) {\n     \n      next(); // 开始播放\n       \n      this.getDuration();\n    },\n    getlyric() {\n      const self = this;\n      \n      this.$http\n        .get(this.host+\"/lyric\", { params: { id: this.$route.params.id } })\n        .then(response => {\n          this.lyric =self.lyricToObj(response.data.lrc.lyric) ;\n        })\n        .catch(error => {\n          console.log(\"接口或处理逻辑出错\");\n        });\n    },\n    getMusicInfo() {\n      const this_ = this;\n      \n      this.$http\n        .get(this.host+\"/song/url\", { params: { id: this.$route.params.id } })\n        .then(response => {\n          for (const item of this.playList) {\n            if (item.id == this.$route.params.id) {\n              this.musicInfo = item;\n            }\n          }\n\n          this.audioSources = {\n            title: this.musicInfo.name,\n            artist: this.musicInfo.ar[0].name,\n            pic: this.musicInfo.al.picUrl + \"?param=500y500\",\n            src: response.data.data[0].url,\n            id: this.$route.params.id\n          };\n          this_.audioList.push(response.data.data[0].url);\n    \n          this_.$store.commit(\"addSongToHistory\", this.audioSources);\n        })\n        .catch(error => {\n          console.log(\"接口或处理逻辑出错\");\n        });\n    }\n  },\n  mounted() {\n    this.getMusicInfo();\n    this.getlyric();\n   \n  },\n  computed: {\n    \n    ...mapState([\"playList\", \"playHistory\"])\n  }\n};\n",{"version":3,"sources":["player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"player.vue","sourceRoot":"src/pages","sourcesContent":[" \n<template>\n  <div v-if=\"audioList.length\">\n    <van-nav-bar left-text=\"返回\" left-arrow @click-left=\"onClickLeft\" />\n    <van-swipe class=\"my-swipe myswipe\" indicator-color=\"red\">\n      <van-swipe-item>\n        <div class=\"v-image\">\n          <div class=\"border\">\n            <van-image\n              :src=\"audioSources.pic\"\n              round\n              :class=\"{'Rotation':isPlaying}\"\n              style=\"width:100%\"\n            ></van-image>\n          </div>\n          <div class=\"title\">{{audioSources.title+'-'+audioSources.artist}}</div>\n        </div>\n      </van-swipe-item>\n      <van-swipe-item  class=\"v-lyric\">\n        \n        <LyricScroll  :lyric=\"lyric\" lyricLineheight=\"1.2em\" :current-time=\"currentTime\" :lyricActiveClass=\"active\" />\n      </van-swipe-item>\n    </van-swipe>\n\n    <AudioPlayer\n      ref=\"audioPlayer\"\n      autoplay=\"autoplay\"\n      :audio-list=\"audioList\"\n      :before-play=\"onBeforePlay\"\n      :show-play-button=\"true\"\n      \n      style=\"position: fixed;width: 90%;bottom: 20px;}\"\n      @timeupdate=\"onTimeUpdate\"\n      @playing=\"Playing\"\n    \n      @pause=\"stopP\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from \"vuex\";\nimport AudioPlayer  from \"../components/audio-player\";\nimport '@liripeng/vue-audio-player/lib/vue-audio-player.css'\n \nimport LyricScroll from \"vue-lyric-scroll\";\n \n\nexport default {\n  name: \"app\",\n  data() {\n    return { \n      audioSources: {},\n      audioList: [],\n      duration: {},\n      timeupdate: {},\n      currentTime: 0,\n      isPlaying:false,\n      xuzhuan: \"Rotation\",\n      lyric: {},\n      active:\"lyric-active\"\n      \n    };\n  },\n  components: {\n    AudioPlayer,\n    LyricScroll\n  },\n  watch: {\n    isPlaying(old, nw) {\n      //监听正在播放的歌曲改变\n       console.log(this.$refs.audioPlayer)\n    },\n    audioList(old,news){\n       \n      \n      \n    }\n  },\n  methods: {\n    play(){\n\n    },\n    stopP() {\n      this.isPlaying = false;\n    },\n    Playing() {\n      this.isPlaying = true; \n      \n\n    },\n    onTimeUpdate(e) {\n      this.currentTime = e.target.currentTime;\n      \n    },\n    getDuration() {\n      let audio = this.$refs.audioPlayer;\n     \n      //此时可以获取到duration\n      this.duration = audio.duration;\n    },\n        timeStrToNum(str) {\n      const minute = Number(str.slice(0, 2))\n      const second = Number(str.slice(3, 5))\n      const minSec = Number(str.slice(6, 8))\n      return minute * 60 + second + minSec / 100\n    },\n    // 将歌词字符串转换为对象，格式为{开始时间: 歌词, ...}\n    lyricToObj(lyricStr) {\n            \n        \n      const obj = {}\n      let perLyric\n      let time\n      lyricStr.split('\\n').forEach((item, idx) => {\n        perLyric = item.slice(item.indexOf(']') + 1)\n        if (perLyric) {\n          time = this.timeStrToNum(item.slice(1, 9))\n          obj[time] = perLyric\n        }\n      })\n      return obj\n    },\n    updateTime(e) {\n      this.currentTime = e.target.currentTime; //获取audio当前播放时间\n    },\n\n    onClickLeft() {\n      this.$router.go(-1); //返回上一层\n    },\n    onBeforePlay(next) {\n     \n      next(); // 开始播放\n       \n      this.getDuration();\n    },\n    getlyric() {\n      const self = this;\n      \n      this.$http\n        .get(this.host+\"/lyric\", { params: { id: this.$route.params.id } })\n        .then(response => {\n          this.lyric =self.lyricToObj(response.data.lrc.lyric) ;\n        })\n        .catch(error => {\n          console.log(\"接口或处理逻辑出错\");\n        });\n    },\n    getMusicInfo() {\n      const this_ = this;\n      \n      this.$http\n        .get(this.host+\"/song/url\", { params: { id: this.$route.params.id } })\n        .then(response => {\n          for (const item of this.playList) {\n            if (item.id == this.$route.params.id) {\n              this.musicInfo = item;\n            }\n          }\n\n          this.audioSources = {\n            title: this.musicInfo.name,\n            artist: this.musicInfo.ar[0].name,\n            pic: this.musicInfo.al.picUrl + \"?param=500y500\",\n            src: response.data.data[0].url,\n            id: this.$route.params.id\n          };\n          this_.audioList.push(response.data.data[0].url);\n    \n          this_.$store.commit(\"addSongToHistory\", this.audioSources);\n        })\n        .catch(error => {\n          console.log(\"接口或处理逻辑出错\");\n        });\n    }\n  },\n  mounted() {\n    this.getMusicInfo();\n    this.getlyric();\n   \n  },\n  computed: {\n    \n    ...mapState([\"playList\", \"playHistory\"])\n  }\n};\n</script>\n <style  >\n .v-lyric{\n     text-align: center !important;\n }\n .lyric-active{\n    color: red !important;\n    font-size: 20px;\n}\n.v-image {\n  position: absolute;\n  left: 15%;\n  top: 15%;\n  width: 70%;\n  box-sizing: border-box;\n}\n.border {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n}\n@-webkit-keyframes rotation {\n  from {\n    -webkit-transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n\n.Rotation {\n  -webkit-transform: rotate(360deg);\n  animation: rotation 8s linear infinite;\n  -moz-animation: rotation 8s linear infinite;\n  -webkit-animation: rotation 8s linear infinite;\n  -o-animation: rotation 8s linear infinite;\n}\n.title {\n  padding-top: 12px;\n  text-align: center;\n}\n.myswipe {\n  height: 25rem;\n}\n\n</style>"]}]}