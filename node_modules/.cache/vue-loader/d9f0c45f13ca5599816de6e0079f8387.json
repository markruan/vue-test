{"remainingRequest":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mc/项目/VUE/2020/src/pages/Mv.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mc/项目/VUE/2020/src/pages/Mv.vue","mtime":1602400718650},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mc/项目/VUE/2020/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// Similarly, you can also introduce the plugin resource pack you want to use within the component\n// import 'some-videojs-plugin'\nexport default {\n  data() {\n    return {\n      MvDetail:{},\n      playerOptions: {\n        playbackRates: [0.7, 1.0, 1.5, 2.0], //播放速度\n        autoplay: false, //如果true,浏览器准备好时开始回放。\n        muted: false, // 默认情况下将会消除任何音频。\n        loop: true, // 导致视频一结束就重新开始。\n        preload: \"auto\", // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: \"zh-CN\",\n        aspectRatio: \"16:9\", // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [\n          {\n            type: \"\", //这里的种类支持很多种：基本视频格式、直播、流媒体等，具体可以参看git网址项目\n            src: \"\" //url地址\n          }\n        ],\n        // poster: this.MvDetail.cover?this.MvDetail.cover:require(\"../assets/logo.png\"), //你的封面地址\n        width: document.documentElement.clientWidth, //播放器宽度\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\", //允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          durationDisplay: true,\n          remainingTimeDisplay: false,\n          fullscreenToggle: true //全屏按钮\n        }\n      }\n    };\n  },\n  created() {\n   \n  },\n  props: {\n    name: {\n      type: String\n    }\n  },\n  mounted() {\n    console.log(\"this is current player instance object\", this.player);\n    this.getMvDetail()\n     this.openMv();\n  },\n  computed: {\n    player() {\n      return this.$refs.videoPlayer.player;\n    }\n  },\n  methods: {\n    openMv() {\n      const this_ = this;\n      this.$http\n        .get(\"/api/mv/url\", { params: { id: this.$route.params.id } })\n        .then(function(response) {\n          this_.playerOptions.sources[0].src = response.data.data.url;\n        })\n        .catch(function(error) {});\n    },\n     onClickLeft(){\n         this.$router.go(-1);//返回上一层\n    },\n    getMvDetail(){\n       const this_ = this;\n      this.$http\n        .get(\"/api/mv/detail\", { params: { mvid: this.$route.params.id } })\n        .then(response=> {\n          this_.MvDetail = response.data.data;\n          this_.playerOptions.poster=this_.MvDetail.cover+\"?param=320y180\"\n          console.log(this_.MvDetail)\n        })\n        .catch(error=> {});\n\n    }\n  }\n};\n",{"version":3,"sources":["Mv.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Mv.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n     <van-nav-bar\n       \n      left-text=\"返回\"\n      \n      left-arrow\n      @click-left=\"onClickLeft\"\n    \n    />\n    <van-loading\n      type=\"circular\"\n      color=\"#1989fa\"\n      vertical\n      v-show=\"!this.playerOptions.sources[0].src\"\n      size=\"24px\"\n      style=\"margin-top:30px\"\n    ></van-loading>\n    <video-player\n      class=\"video-player vjs-custom-skin \"\n      v-show=\"this.playerOptions.sources[0].src\"\n      ref=\"videoPlayer\"\n      :playsinline=\"true\"\n      :options=\"playerOptions\"\n    />\n    <van-cell \n    v-show=\"this.playerOptions.sources[0].src\"\n    title=\"MV信息\" \n    :value=\"MvDetail.publishTime\" \n    size=\"large\" \n    :label=\"MvDetail.name+'-'+MvDetail.artistName\" />\n  </div>\n</template>\n<script>\n// Similarly, you can also introduce the plugin resource pack you want to use within the component\n// import 'some-videojs-plugin'\nexport default {\n  data() {\n    return {\n      MvDetail:{},\n      playerOptions: {\n        playbackRates: [0.7, 1.0, 1.5, 2.0], //播放速度\n        autoplay: false, //如果true,浏览器准备好时开始回放。\n        muted: false, // 默认情况下将会消除任何音频。\n        loop: true, // 导致视频一结束就重新开始。\n        preload: \"auto\", // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: \"zh-CN\",\n        aspectRatio: \"16:9\", // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [\n          {\n            type: \"\", //这里的种类支持很多种：基本视频格式、直播、流媒体等，具体可以参看git网址项目\n            src: \"\" //url地址\n          }\n        ],\n        // poster: this.MvDetail.cover?this.MvDetail.cover:require(\"../assets/logo.png\"), //你的封面地址\n        width: document.documentElement.clientWidth, //播放器宽度\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\", //允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          durationDisplay: true,\n          remainingTimeDisplay: false,\n          fullscreenToggle: true //全屏按钮\n        }\n      }\n    };\n  },\n  created() {\n   \n  },\n  props: {\n    name: {\n      type: String\n    }\n  },\n  mounted() {\n    console.log(\"this is current player instance object\", this.player);\n    this.getMvDetail()\n     this.openMv();\n  },\n  computed: {\n    player() {\n      return this.$refs.videoPlayer.player;\n    }\n  },\n  methods: {\n    openMv() {\n      const this_ = this;\n      this.$http\n        .get(\"/api/mv/url\", { params: { id: this.$route.params.id } })\n        .then(function(response) {\n          this_.playerOptions.sources[0].src = response.data.data.url;\n        })\n        .catch(function(error) {});\n    },\n     onClickLeft(){\n         this.$router.go(-1);//返回上一层\n    },\n    getMvDetail(){\n       const this_ = this;\n      this.$http\n        .get(\"/api/mv/detail\", { params: { mvid: this.$route.params.id } })\n        .then(response=> {\n          this_.MvDetail = response.data.data;\n          this_.playerOptions.poster=this_.MvDetail.cover+\"?param=320y180\"\n          console.log(this_.MvDetail)\n        })\n        .catch(error=> {});\n\n    }\n  }\n};\n</script>\n \n<style scoped>\n.play-button {\n　　width: 72px;\n   height: 72px;\n   border-radius: 100%;\n   z-index: 100;\n   background-color: #ffffff;\n   border: solid 1px #979797;\n}\n</style>\n "]}]}